<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo的一些技巧</title>
      <link href="/2019/12/26/hexo-after/"/>
      <url>/2019/12/26/hexo-after/</url>
      
        <content type="html"><![CDATA[<h2 id="关于写作"><a href="#关于写作" class="headerlink" title="关于写作"></a>关于写作</h2><p>在根目录下打开git bash</p><pre><code class="git">$ hexo new [layout] &quot;title&quot;</code></pre><p><code>layout</code>为新建.md文件的布局格式，不写默认为post布局，在根目录的scaffolds文件夹里默认有<code>draft.md</code>，<code>page.md</code>，<code>post.md</code>三种布局格式</p><pre><code class="markdown">title: {{ title }}date: {{ date }}tags:</code></pre><p><code>title</code>：文章显示标题，hexo的一些技巧接受hexo new时指定的title；</p><p><code>date</code>：文章生成时间，1577346595000为hexo new时的时间；</p><p><code>tags</code>：文章标签，可以为文章指定多个标签。</p><p>可以在scaffolds文件夹里新增自定义布局格式的.md文件，并在新建hexo new的时候指定对应名称为新建文件的layout，也可以直接修改里面的三个文件。</p><p>根目录下的<code>_config.yml</code>是hexo的主配置文件，# Writing注释下的配置为写作的配置，修改<code>default_layout</code>的值就可以切换hexo new的布局风格。</p><p>最后，<code>new</code>一个新文章文件时，会在根目录的<code>source</code>文件夹下生成对应layout的文件夹（文件夹不存在时），并在对应文件夹里生成指定标题的新文件 <code>title.md</code>，里面的内容与layout对应。</p><h2 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h2><p>hexo支持使用不同风格的主题以个性化自己的网站。可以自己修改也可以使用别人写好的。</p><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo theme官网</a></p><p>可以在官网找到自己喜欢的theme，然后找到对应的git clone地址，在主目录下进入<code>theme</code>目录并打开git bash</p><pre><code class="git">$ git clone #对应git clone链接</code></pre><p>clone done之后就会在theme文件夹里生成一个主题的文件夹，回到根目录打开<code>_config.yml</code>配置文件，修改<code>theme:</code>后的属性为预切换主题文件夹的名称即可切换主题。</p><p>对应主题的相关配置操作可以查看该主题文件夹里面的<code>README.md</code>。</p><p>该文件夹下的<code>_config.yml</code>为该主题的配置文件，可以修改里面的配置以适应自己的需求。</p><p><code>layout</code>文件夹为主题的整体布局文件，修改里面的文件即可修改自己的页面布局，使用的时<code>ejs</code>语法。</p><p><code>source</code>文件夹为主题的资源文件夹，存放了一些主题所使用的<code>图片</code>以及<code>js</code>、<code>css</code>代码，也可以修改里面的文件以适应自己的需求</p><p>这些是一般主题基本具有的目录结构，当然根据主题设计者的风格也可能有区别，需要时再根据具体情况了解。</p><h2 id="关于背景音乐"><a href="#关于背景音乐" class="headerlink" title="关于背景音乐"></a>关于背景音乐</h2><p>我想要的背景音乐是自己本地上传的，所以我是在对应的<code>ejs</code>文件添加自启动<code>javascript</code>脚本</p><pre><code class="ejs">&lt;script&gt;window.onload = function(){        //存入所需歌曲的src地址        var arr = [/*可以存多个音频文件地址，以“，”分割*/];        var myAudio = new Audio();        myAudio.preload = true;        myAudio.controls = true;         //随机获取歌曲的src        myAudio.src = arr[getRandom(arr.length)];        myAudio.addEventListener(&#39;ended&#39;, playEndedHandler, false);        myAudio.play();        document.getElementById(&quot;audioBox&quot;).appendChild(myAudio);        myAudio.loop = false;//禁止循环，否则无法触发ended事件        function playEndedHandler(){            myAudio.src = arr[getRandom(arr.length)];            myAudio.play();        }        // 生成随机下标        function getRandom(length){            var num = Math.random();            num = num * (length);            num = Math.floor(num);            return num;        }    }&lt;/script&gt;&lt;div id=&quot;audioBox&quot; style=&quot;position:absolute; bottom: 0; right: 0;&quot;&gt;&lt;/div&gt;</code></pre><p>当然也可以引用音乐播放软件的一些<code>iframe</code>。</p><h2 id="关于备份与移植"><a href="#关于备份与移植" class="headerlink" title="关于备份与移植"></a>关于备份与移植</h2><p>由于hexo部署到Github时，Github的仓库只存了hexo转化好的网站文件，即根目录的<code>.deploy_git</code>文件夹下的内容，<code>.deploy_git</code>是hexo g&amp;hexo d是产生的部署到Github是产生的。<code>public</code>文件夹内容也一样，不过这时本地运行hexo s时本地访问时网站的根路径。</p><p>总之，为了防止数据丢失和多PC操作，可以把整个文件夹存在Github上。可以在Github新建一个文件夹，因为本来就是相同的project，我就直接在该博客部署的Github仓库新建了一个分支。</p><p><img src="https://cdn.jsdelivr.net/gh/Cirike/cdn.static.resource@master/blog_img/1577352230.jpg" alt="alt 图片"></p><p>在Find or create a branch…搜索hexo即可创建hexo分支。创建完成之后，在本地新建一个临时文件夹，再在clone or download复制git链接克隆到本地，克隆完在本地删除文件夹里除了<code>.git</code>以外的所有文件。之后打开git bash</p><pre><code class="git">$ git add .$ git commit -m &quot;update&quot;$ git push origin master:hexo</code></pre><p>这就更新将<code>Github</code>的<code>hexo</code>分支清空了，这时再将<code>.git</code>文件夹复制到博客文件夹根目录下，这样就把<code>hexo</code>分支与本地博客文件夹建立了链接。</p><p>这时再在博客文件夹下打开git bash</p><pre><code class="git">$ git add .$ git commit -m &quot;update&quot;$ git push origin master:hexo</code></pre><p>就成功将博客主文件夹提交到<code>Github</code>仓库的<code>hexo</code>分支了。</p><h2 id="关于快捷部署"><a href="#关于快捷部署" class="headerlink" title="关于快捷部署"></a>关于快捷部署</h2><p>在windows系统下，可以编写一个<code>.bat</code>批处理文件</p><pre><code class="bat">::重新部署hexo至githubcall hexo cleancall hexo gcall hexo d::提交更新至githubcall git add .call git commit -m &quot;update&quot;call git push origin master:hexo</code></pre><p>以后只需要打开这个这个<code>.bat</code>文件就可以部署和推送仓库一步完成。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用JSDelivr加速加载Github资源</title>
      <link href="/2019/12/24/cdn-accelerate/"/>
      <url>/2019/12/24/cdn-accelerate/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN"></a>什么是CDN</h2><p>CDN(Content Delivery Network)是指内容分发网络，也称为内容传送网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p><p>CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</p><h2 id="为什么使用CDN"><a href="#为什么使用CDN" class="headerlink" title="为什么使用CDN"></a>为什么使用CDN</h2><p>由于我在Github挂载的个人静态博客网站所需加载的诸如图片、音乐文件都需要在Github存储库获取，而Github是美国的，国内访问比较耗时，可以测试一下</p><pre><code class="cmd">C:\Users\Cirike&gt;ping github.com正在 Ping github.com [192.30.253.113] 具有 32 字节的数据:来自 192.30.253.113 的回复: 字节=32 时间=292ms TTL=50来自 192.30.253.113 的回复: 字节=32 时间=290ms TTL=50来自 192.30.253.113 的回复: 字节=32 时间=291ms TTL=50来自 192.30.253.113 的回复: 字节=32 时间=290ms TTL=50192.30.253.113 的 Ping 统计信息:    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，往返行程的估计时间(以毫秒为单位):    最短 = 290ms，最长 = 292ms，平均 = 290msC:\Users\Cirike&gt;ping www.baidu.com正在 Ping www.baidu.com [14.215.177.38] 具有 32 字节的数据:来自 14.215.177.38 的回复: 字节=32 时间=7ms TTL=56来自 14.215.177.38 的回复: 字节=32 时间=10ms TTL=56来自 14.215.177.38 的回复: 字节=32 时间=7ms TTL=56来自 14.215.177.38 的回复: 字节=32 时间=9ms TTL=5614.215.177.38 的 Ping 统计信息:    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，往返行程的估计时间(以毫秒为单位):    最短 = 7ms，最长 = 10ms，平均 = 8ms</code></pre><p>可以看到，访问Github比访问百度需要多经过6个中转路由，且耗时30~40倍，这使得网站加载时获取静态资源时间过长而体验不好，这时可以想到两种解决方法，第一种是直接使用国内服务器存放静态资源，但是贫穷限制了本人选择了第二种方法，使用CDN加速Github资源。</p><h2 id="构建JSDelivr加速环境"><a href="#构建JSDelivr加速环境" class="headerlink" title="构建JSDelivr加速环境"></a>构建JSDelivr加速环境</h2><p>JSDelivr是一款免费的CDN加速产品，可以加速Github和NPM的资源，使用方法也很简单，首先新建一个Github的仓库，用来存储需要存放的静态资源。使用本地Git连接上，然后向Github上传文件，上传之后在Git上面打开资源，此时的连接为</p><pre><code class="text">https://github.com/Cirike/cdn.static.resource/blob/master/test.txt</code></pre><p>而使用JSDelivr加速访问的话只需要修改连接为对应的形式</p><pre><code class="text">https://cdn.jsdelivr.net/gh/Cirike/cdn.static.resource@master/test.txt</code></pre><p>即</p><pre><code class="text">https://cdn.jsdelivr.net/gh/{Github用户名}/{Github仓库名}@{版本名}/{仓库下资源路径}</code></pre><p>此时访问资源的速度就直线上升了。</p><p>其中版本名可以在Github当前仓库的Release</p><p><img src="https://cdn.jsdelivr.net/gh/Cirike/cdn.static.resource@master/blog_img/1577154346.jpg" alt="alt 图片"></p><p><img src="https://cdn.jsdelivr.net/gh/Cirike/cdn.static.resource@master/blog_img/1577154432.jpg" alt="alt 图片"></p><p><img src="https://cdn.jsdelivr.net/gh/Cirike/cdn.static.resource@master/blog_img/1577154462.jpg" alt="alt 图片"></p><p>输入版本号点击Publish release发布后，@对应的版本号就能访问对应的资源了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cdn </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo和Github搭建个人静态博客</title>
      <link href="/2019/12/17/begin-hexo/"/>
      <url>/2019/12/17/begin-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="基于hexo和Github搭建个人静态博客"><a href="#基于hexo和Github搭建个人静态博客" class="headerlink" title="基于hexo和Github搭建个人静态博客"></a>基于hexo和Github搭建个人静态博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录基于hexo框架部署到github的个人静态博客搭建过程，博客使用markdown语言编写文章，使得页面非常整洁，读写能力卓越！</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><p><strong>Node.js</strong></p><p>hexo基于Node.js，安装hexo前需要先安装好node.js。可以在<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">官网</a>下载。</p><p>安装好后按Win+R打开运行，输入cmd打开命令行输入node命令，如果出现</p><pre><code class="cmd">Welcome to Node.js (版本号).Type &quot;.help&quot; for more information.</code></pre><p>即为安装成功</p></li><li><p><strong>Git</strong></p><p>接着需要安装git，同样可以前往<a href="https://git-scm.com/" target="_blank" rel="noopener">官网</a>下载最新版本的git。</p><p>安装完成后鼠标右键菜单栏出现Git Gui Here和Git Bash Here即为安装成功。</p><pre><code class="git"> $ git config --global user.name &quot;yourname&quot; $ git config --global user.email youremail</code></pre><p>打开Git Bash做好基础配置。</p></li><li><p><strong>Markdown编辑器</strong></p><p>该博客系统使用markdown语法编写文章，markdown是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown是一种语法格式，有多种编辑器可以支持它。</p><p>在这里推荐使用Typora <a href="https://typora.io/" target="_blank" rel="noopener">官网</a>。</p></li><li><p><strong>Hexo</strong></p><p>接下来可以正式下载Hexo了，Win+R运行打开cmd命令行</p><pre><code class="cmd">$ npm i -g hexo</code></pre><p>安装hexo</p><p>如果下载速度太慢可以配置国内cnpm镜像，在cmd配置</p><pre><code class="cmd">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>安装完成后就可以使用cnpm代替npm操作，不同的是走的是国内的镜像，速度会变快</p><pre><code class="cmd">$ cnpm i -g hexo</code></pre><p>安装完成之后查看版本号</p><pre><code class="cmd">$ hexo -v</code></pre><p>若出现版本号则hexo安装成功。</p><pre><code class="cmd">$ cnpm install</code></pre><p>安装依赖</p><p>进入自己的工作区，新建一个文件夹，进入新建文件夹，右键菜单栏点击Git Bash Here打开Git命令行窗口，初始化该文件夹</p><pre><code class="git">$ hexo init</code></pre><p>初始化完成后文件夹会出现hexo基本结构文件。</p><pre><code class="filesystem">|-- _config.yml|-- package.json|-- scaffolds|-- source   |-- _posts|-- themes|-- .gitignore|-- package.json</code></pre><p>默认会在source/_posts生成hello-world.md文件，在Git Bash继续输入</p><pre><code class="git">$ hexo new &quot;title&quot;</code></pre><p>就会在_posts新生成一个title.md文件，使用Typora打开这个文件就可以写自己的文章了。</p><pre><code class="cmd">$ hexo s                   #s为serveINFO  Start processingINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code></pre><p>这时hexo就部署在了本机，打开浏览器地址栏输入 localhost:4000 就能看到博客界面了。</p></li><li><p><strong>Github</strong></p><p>打开<a href="https://www.github.com" target="_blank" rel="noopener">Github</a>登录（没有要注册），新建一个仓库，仓库名为 <em>{yourname}</em>.github.io， <em>{yourname}</em>是Github的账户名称。</p><p>在Github的右上角打开setting打开设置页面，点击选择SSH and GPS keys，点击New SSH key新建一个SSH keys，Title随意起，Key值在C:\users\administrator\找到.ssh文件夹，如果没有打开Git Bash输入</p><pre><code class="git">$ ssh-keygen -t rsa -C &quot;email&quot;    #email为git config设置的邮箱</code></pre><p>就会生成.ssh文件夹，其中id_rsa.pub文件未生成的ssh公钥，复制里面的内容到上面Github的Key里面，点击Add SSH key就可以建立本机到Github的SSH连接了。</p><p>打开_config.yml文件</p><pre><code class="yml">  # Site  title: Hexo         #修改此处为你的标题，即你网站的主标题  subtitle: &#39;&#39;        #此处为副标题  description: &#39;&#39;        #网站描述  keywords:              author: John Doe    #作者名  language: en        #网站使用语言  timezone: &#39;&#39;        #网站使用时区</code></pre><p>根据自己需要修改网站信息，接下来配置与Github的联系（重要），此处在yml文件最下面        </p><pre><code class="yml">  deploy:    type: git    repo: git@github.com:{yourname}/{yourname}.github.io    #此处{yourname}为            Github用户名，不确定可以打开刚才Github新建的仓库点击Clone or download查看  branch: master</code></pre><p>继续Git Bash</p><pre><code class="git">  $ cnpm i hexo-deployer-git -save</code></pre><p>安装完成就可以使用命令直接部署到Github仓库去了</p><pre><code class="git">  $ hexo clean  $ hexo g                  #g为generate  $ hexo d                  #d为deploy</code></pre><p>Github为你分配的网站地址为 http://{yourname}.github.io</p><p>这是Github分配的二级域名，想要一级域名需要购买之后进行配置。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h2><p>  没想到写一篇文章这么耗时，本章就只介绍基础搭建了，其他之后有空再开新篇吧。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/12/hello-world/"/>
      <url>/2019/12/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
